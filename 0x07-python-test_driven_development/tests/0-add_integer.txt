usage: add_integer function
***************************

This function returns the sum of two integers
and one of the parameter is defaluted to 98

In advance import the function add_integer

    >>> add_integer = __import__('0-add_integer').add_integer

Followed by different test scenarios:

regular scenario:
    >>> add_integer(1, 2)
    3

Negative input:
    >>> add_integer(100, -2)
    98

One input:
    >>> add_integer(2)
    100

Float and negative input:
    >>> add_integer(100.3, -2)
    98

Int NaN:
    >>> add_integer(int('NaN'))
    Traceback (most recent call last):
    ...
    ValueError: invalid literal for int() with base 10: 'NaN'

Float overflow:

    >>> add_integer(float('inf')) 
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Float NaN:
    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

String input:
    >>> add_integer(4, "School")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

String input in the first argument:
    >>> add_integer("xxx")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

None input:
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Double negative float input:
    >>> add_integer(-100.5, -10.8)
    -110

Double string input:
    >>> add_integer("holberton", "school")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
